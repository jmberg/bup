#!/bin/sh
"""": # -*-python-*-
bup_python="$(dirname "$0")/../cmd/bup-python" || exit $?
exec "$bup_python" "$0" ${1+"$@"}
"""
# end of bup preamble

from __future__ import absolute_import, print_function

from os.path import abspath, dirname
from random import randint
from subprocess import CalledProcessError, check_output
from sys import stderr, stdout
import sys

script_home = abspath(dirname(sys.argv[0] or '.'))
sys.path[:0] = [abspath(script_home + '/../lib'), abspath(script_home + '/..')]

from wvtest import wvcheck, wvfail, wvmsg, wvpass, wvpasseq, wvpassne, wvstart

wvstart('command line arguments are not mangled')

def rand_bytes(n):
    return bytes([randint(1, 255) for x in range(n)])

for trial in range(100):
    canary = b'canary'
    cmd = [b't/echo-argv-bytes', canary, rand_bytes(randint(1, 32))]
    try:
        out = check_output(cmd)
    except CalledProcessError as ex:
        if canary in ex.output:
            raise
        print('This failure may represent a known issue in glibc, see README:\n',
              '  https://sourceware.org/bugzilla/show_bug.cgi?id=26034\n',
              file=stderr)
    else:
        expected = b'\0\n'.join(cmd) + b'\0\n'
        wvpasseq(expected, out)
